from typing import Dict, List, Optional
import logging
from mcp_client import MCPClient
logger = logging.getLogger(__name__)
class MCPManager:
    def __init__(self):
        self.mcp_clients: Dict[str, MCPClient] = {}
        self.mcp_status: Dict[str, bool] = {}
        self.available_mcps: Dict[str, dict] = {
            'productmaster': {
                'name': 'ProductMaster',
                'description': '商品情報検索MCP',
                'url': 'http://localhost:8003',
                'enabled': False
            }
            # 将来の拡張用
            # 'market_data': {
            #     'name': 'MarketData',
            #     'description': '市場データ取得MCP',
            #     'url': 'http://localhost:8004',
            #     'enabled': False
            # }
        }
    async def initialize(self):
        """全MCPクライアントを初期化"""
        for mcp_id, config in self.available_mcps.items():
            try:
                client = MCPClient(config['url'])
                if await client.health_check():
                    await client.initialize()
                    self.mcp_clients[mcp_id] = client
                    self.mcp_status[mcp_id] = config['enabled']
                    logger.info(f"✅ {config['name']} MCP initialized")
                else:
                    logger.warning(f"⚠️ {config['name']} MCP health check failed")
            except Exception as e:
                logger.error(f"❌ Failed to initialize {config['name']} MCP: {e}")
    def get_mcp_status(self, mcp_id: str = 'productmaster') -> dict:
        """MCP状態取得"""
        if mcp_id not in self.available_mcps:
            return {'available': False, 'enabled': False}
        return {
            'available': mcp_id in self.mcp_clients,
            'enabled': self.mcp_status.get(mcp_id, False)
        }
    def set_mcp_enabled(self, mcp_id: str, enabled: bool) -> dict:

    def toggle_mcp(self, mcp_id: str) -> bool:
        """MCP状態切り替え"""
        if mcp_id in self.mcp_status:
            self.mcp_status[mcp_id] = not self.mcp_status[mcp_id]
            return self.mcp_status[mcp_id]
        return False
        """MCP有効/無効設定"""
        if mcp_id in self.mcp_status:
            self.mcp_status[mcp_id] = enabled
        return self.get_mcp_status(mcp_id)
    def get_all_mcp_status(self) -> dict:
        """全MCP状態取得"""
        return {
            mcp_id: self.get_mcp_status(mcp_id)
            for mcp_id in self.available_mcps.keys()
        }
    async def process_with_mcp(self, message: str, mcp_id: str = 'productmaster'):
        """指定MCPでメッセージ処理"""
        if mcp_id not in self.mcp_clients or not self.mcp_status.get(mcp_id, False):
            return None
        try:
            client = self.mcp_clients[mcp_id]
            return await client.process_message(message)
        except Exception as e:
            logger.error(f"MCP {mcp_id} processing error: {e}")
            return None
